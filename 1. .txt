1. 소프트웨어 생명 주기
  1) 소프트웨어 생명 주기(Software Life Cycle)
    - 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 단계별로 나눈 것
  
  2) 폭포수 모형(Waterfall Model)
    - 각 단계를 확실히 매듭짓고 결과를 검토하여 승인 과정을 거친 후 다음 단계 진행하는 개발 방법론
    - 가장 오래됨
    - 고전적 생명 주기 모형
    - 모형을 적용한 경험과 성공 사례 많음
    - 다음 단계로 진행하기 위한 결과물이 명확하게 산출되어야 함

  3) 프로토타입 모형(Prototype Model, 원형 모형)
    - 실제 개발될 소프트웨어에 대한 견본품(Prototype)을 만들어 최종 결과물을 예측

  4) 나선형 모형(Spiral Model, 점진적 모형)
    - 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 모형
    - 보헴이 제안함
    - 폭포수 + 프토토타입 장점에 위험 분석 기능 추가
    - 누락되거나 추가된 요구사항 첨가 가능
    - 유지보수 과정 필요 없음
    - 4가지 활동
      - 계획 수림 -> 위험 분석 -> 개발 및 검증 -> 고객 평가
  
  5) 애자일 모형(Agile Model)
    - 요구사항 변화에 유연하게 대응하기 위해 일정한 주기를 반복해 개발하는 모형
    - 애자일 개발 핵심 가치
      - 개인과 상호작용에 더 가치를 둠
      - 방대한 문서보다 실행되는 SW에 더 가치를 둠
    - 대표적인 개발 모형
      - 스크럼(Scrum)
      - XP(eXtreme Programming)
      - 칸반(Kanban)
      - Lean
      - 기능 중심 개발(FDD: Feature Driven Development)
  
  6) 소프트웨어 공학(SE: Software Engineering)
    - 소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문
    - 여러가지 방법론, 도구, 관리 기법들을 통해 소프트웨어 품질, 생산성 향상을 목표
    - 소프트웨어 공학의 기본 원칙
      - 현대적인 프로그래밍 지속적 적용
      - 개발된 소프트웨어 품질 유지되도록 지속적 검증
      - 개발 관련 사항 및 결과에 대한 명확한 기록 유지

2. 스크럼(Scrum) 기법
  1) 스크럼(Scrum)
    - 팀이 중심이 되어 개발의 효울성 높이는 기법
    
  2) 스크럼 팀
    - 제품 책임자(PO: Product Owner)
      - 요구 사항이 담긴 백로그 작성하는 주체
        * 백로그 : 요구사항을 모아 우선순위를 부여한 목록
      - 이해관계자들 중 개발될 제품에 대한 이해도가 높고 요구사항을 책임지고 의사를 결정할 사람으로 선정

    - 스크럼 마스터(SM: Scrum Master)
      - 스크럼 팀이 스크럼을 잘 수행할 수 있도록 가이드 역할
    
    - 개발팀(DT: Development Team)
      - 위를 제외한 모든 팀원, 개발 수행

  3) 스크럼 개발 프로세스
    - 계획 -> 스프린트 -> 회의 -> 검토 => 회고

    - 스프린트 계획 회의(Sprint Planning Meeting)
      - 제품 백로그 중 이번 스프린트에서 수행할 작업 대상으로 단기 일정 수립하는 회의
    - 스프린트(Sprint)
      - 실제 개발 작업을 진행하는 과정, 2~4주
    - 일일 스크럼 회의(Daily Scrum Meeting)
      - 모든 팀원이 약속된 시간에 15분 정도 진행사항 점검
      - 남은 작업 시간은 소멸 차트(Burn-down Chart)에 표시
    - 스프린트 검토 회의(Sprint Review)
      - 부분 또는 전체가 요구사항에 잘 부합하는지 테스트
    - 스프린트 회고(Sprint Retrospective)
      - 정해놓은 규칙 준수 여부 및 개선할 점 확인하고 기록하는 것

3. XP(eXtreme Programming) 기법
  1) XP(eXtreme Programming)
    - 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법
    - 릴리즈 기간을 짧게 반복하면서 고객의 요구사항 반영에 대한 가시성 높임
      * 릴리즈 : 몇 개의 요구사항이 적용되어 부분적으로 기능이 완료된 제품 제공
    - XP의 5가지 핵심 가치
      - 피드백, 존중, 의사소통, 용기, 단순성
      - 피존의 용기는 단순하다
  
  2) XP 개발 프로세스
    - 릴리즈 계획 수립(Release Planning)
      - 부분 혹은 전체 개발 완료 시점에 대한 일정 수립
    - 이터레이션(Iteration, 주기)
      - 개발 작업 진행 과정, 1~3주
    - 승인 검사(Acceptance Test, 인수 테스트)
      - 하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트
    - 소규모 릴리즈(Small Release)
      - 요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소한 것
    
    - 사용자 스토리(User Story)
      - 요구사항을 간단한 시나리오로 표현
    - 스파이크(Spike)
      - 신뢰성 높이고 기술 문제 위험 감소하기 위한 별도의 간단한 프로그램

  3) XP의 주요 실천 방법(Practice)
    - Pair Programming(짝 프로그래밍)
      - 다른 사람과 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성함
    - Collective OwnerShip(공동 코드 소유)
      - 개발 코드에 대한 권한과 책임을 공동으로 소유함
    - Test-Driven Development(테스트 주도 개발)
      - 코드 작성 전에 테스트 케이스 먼저 작성해 자신이 뭘 해야할지 정확히 파악함
      - 테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구를 사용함
    - Whole Team(전체 팀)
      - 모든 구성원들은 역할이 있고 책임을 가져야 함
    - Continuous Integration(계속적인 통합)
      - 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합됨
    - Refactoring(리팩토링)
      - 프로그램의 기능 변경 없이 시스템 재구성
      - 목적 : 프로그램을 쉽게 이해하고 빠르게 개발할 수 있도록 하기 위함
    - Small Releases(소규모 릴리즈)
      - 릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응함
      




















1. 소프트웨어 생명 주기
  1) 소프트웨어 생명 주기(Software Life Cycle)
    - 소프트웨어를 개발하기 위한 설계, 운용, 유지보수 등의 과정을 단계별로 나눈 것
  
  2) 폭포수 모형(Waterfall Model)
    - 각 단계를 확실히 매듭짓고 결과를 검토하여 승인 과정을 거친 후 다음 단계 진행하는 개발 방법론
    - 가장 오래됨
    - 고전적 생명 주기 모형
    - 모형을 적용한 경험과 성공 사례 많음
    - 다음 단계로 진행하기 위한 결과물이 명확하게 산출되어야 함

  3) 프로토타입 모형(Prototype Model, 원형 모형)
    - 실제 개발될 소프트웨어에 대한 견본품(Prototype)을 만들어 최종 결과물을 예측

  4) 나선형 모형(Spiral Model, 점진적 모형)
    - 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 모형
    - 보헴이 제안함
    - 폭포수 + 프토토타입 장점에 위험 분석 기능 추가
    - 누락되거나 추가된 요구사항 첨가 가능
    - 유지보수 과정 필요 없음
    - 4가지 활동
      - 계획 수림 -> 위험 분석 -> 개발 및 검증 -> 고객 평가
  
  5) 애자일 모형(Agile Model)
    - 요구사항 변화에 유연하게 대응하기 위해 일정한 주기를 반복해 개발하는 모형
    - 애자일 개발 핵심 가치
      - 개인과 상호작용에 더 가치를 둠
      - 방대한 문서보다 실행되는 SW에 더 가치를 둠
    - 대표적인 개발 모형
      - 스크럼(Scrum)
      - XP(eXtreme Programming)
      - 칸반(Kanban)
      - Lean
      - 기능 중심 개발(FDD: Feature Driven Development)
  
  6) 소프트웨어 공학(SE: Software Engineering)
    - 소프트웨어의 위기를 극복하기 위한 방안으로 연구된 학문
    - 여러가지 방법론, 도구, 관리 기법들을 통해 소프트웨어 품질, 생산성 향상을 목표
    - 소프트웨어 공학의 기본 원칙
      - 현대적인 프로그래밍 지속적 적용
      - 개발된 소프트웨어 품질 유지되도록 지속적 검증
      - 개발 관련 사항 및 결과에 대한 명확한 기록 유지

2. 스크럼(Scrum) 기법
  1) 스크럼(Scrum)
    - 팀이 중심이 되어 개발의 효울성 높이는 기법
    
  2) 스크럼 팀
    - 제품 책임자(PO: Product Owner)
      - 요구 사항이 담긴 백로그 작성하는 주체
        * 백로그 : 요구사항을 모아 우선순위를 부여한 목록
      - 이해관계자들 중 개발될 제품에 대한 이해도가 높고 요구사항을 책임지고 의사를 결정할 사람으로 선정

    - 스크럼 마스터(SM: Scrum Master)
      - 스크럼 팀이 스크럼을 잘 수행할 수 있도록 가이드 역할
    
    - 개발팀(DT: Development Team)
      - 위를 제외한 모든 팀원, 개발 수행

  3) 스크럼 개발 프로세스
    - 계획 -> 스프린트 -> 회의 -> 검토 => 회고

    - 스프린트 계획 회의(Sprint Planning Meeting)
      - 제품 백로그 중 이번 스프린트에서 수행할 작업 대상으로 단기 일정 수립하는 회의
    - 스프린트(Sprint)
      - 실제 개발 작업을 진행하는 과정, 2~4주
    - 일일 스크럼 회의(Daily Scrum Meeting)
      - 모든 팀원이 약속된 시간에 15분 정도 진행사항 점검
      - 남은 작업 시간은 소멸 차트(Burn-down Chart)에 표시
    - 스프린트 검토 회의(Sprint Review)
      - 부분 또는 전체가 요구사항에 잘 부합하는지 테스트
    - 스프린트 회고(Sprint Retrospective)
      - 정해놓은 규칙 준수 여부 및 개선할 점 확인하고 기록하는 것

3. XP(eXtreme Programming) 기법
  1) XP(eXtreme Programming)
    - 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법
    - 릴리즈 기간을 짧게 반복하면서 고객의 요구사항 반영에 대한 가시성 높임
      * 릴리즈 : 몇 개의 요구사항이 적용되어 부분적으로 기능이 완료된 제품 제공
    - XP의 5가지 핵심 가치
      - 피드백, 존중, 의사소통, 용기, 단순성
      - 피존의 용기는 단순하다
  
  2) XP 개발 프로세스
    - 릴리즈 계획 수립(Release Planning)
      - 부분 혹은 전체 개발 완료 시점에 대한 일정 수립
    - 이터레이션(Iteration, 주기)
      - 개발 작업 진행 과정, 1~3주
    - 승인 검사(Acceptance Test, 인수 테스트)
      - 하나의 이터레이션 안에서 부분 완료 제품이 구현되면 수행하는 테스트
    - 소규모 릴리즈(Small Release)
      - 요구사항에 유연하게 대응할 수 있도록 릴리즈의 규모를 축소한 것
    
    - 사용자 스토리(User Story)
      - 요구사항을 간단한 시나리오로 표현
    - 스파이크(Spike)
      - 신뢰성 높이고 기술 문제 위험 감소하기 위한 별도의 간단한 프로그램

  3) XP의 주요 실천 방법(Practice)
    - Pair Programming(짝 프로그래밍)
      - 다른 사람과 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성함
    - Collective OwnerShip(공동 코드 소유)
      - 개발 코드에 대한 권한과 책임을 공동으로 소유함
    - Test-Driven Development(테스트 주도 개발)
      - 코드 작성 전에 테스트 케이스 먼저 작성해 자신이 뭘 해야할지 정확히 파악함
      - 테스트가 지속적으로 진행될 수 있도록 자동화된 테스팅 도구를 사용함
    - Whole Team(전체 팀)
      - 모든 구성원들은 역할이 있고 책임을 가져야 함
    - Continuous Integration(계속적인 통합)
      - 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합됨
    - Refactoring(리팩토링)
      - 프로그램의 기능 변경 없이 시스템 재구성
      - 목적 : 프로그램을 쉽게 이해하고 빠르게 개발할 수 있도록 하기 위함
    - Small Releases(소규모 릴리즈)
      - 릴리즈 기간을 짧게 반복함으로써 고객의 요구 변화에 신속히 대응함

4. 개발 기술 환경 파악
  1) 개발 기술 환경 파악의 개요
    - 개발하고자 하는 소프트웨어와 관련된 OS, DBMS, 미들웨어 등 선정할 때 고려해야 할 사항 기술
      오픈 소스 사용 시 주의사항 제시
      * 미들웨어 : 운영체제와 운영체제 의해 실행되는 응용 프로그램 사이에서 추가적인 서비스 제공하는 소프트웨어
  2) 운영체제(OS: Operating System)
    - 컴퓨터 시스템의 자원을 효율적으로 관리하며, 컴퓨터를 편리하고 효율적으로 사용할 수 있돌고 환경 제공 소프트웨어
    - 운영체제 관련 요구사항 식별 시 고려사항
      - 기술 지원, 성능, 가용성, 주변 기기, 구축 비용(기성가주구)

  3) 데이터베이스 관리 시스템(DBMS: DataBase Management System)
    - 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고, 데이터베이스를 관리해 주는 소프트웨어
    - 기존 파일 시스템이 갖는 데이터 종속성과 중복성 문제를 해결하기 위해 제안된 시스템
    - DBMS 관련 요구사항 식별 시 고려사항
      - 기술 지원, 성능, 가용성, 상호 호환성, 구축 비용(기성가상구)
  
  4) 웹 애플리케이션 서버(WAS: Web Application Server)
    - 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어
    - 웹 애플리케이션 서버 관련 요구사항 식별 시 고려사항
      - 기술 지원, 성능, 가용성, 구축 비용(기성가구)
  
  5) 오픈 소스(Open Source)
    - 제한 없이 사용할 수 있도록 소스 코드를 공개한 소프트웨어
    - 오픈 소스 관련 요구사항 식별 시 고려사항
      - 라이선스의 종류, 사용자의 수, 기술의 지속 가능성(라사기)

5. 요구사항 정의
  1) 요구사항
    - 소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 정상적으로 운영되는데 필요한 제약조건

  2) 기능 요구사항(Functional requirements)
    - 기능이나 수행과 관련된 요구사항
    - 시스템 입출력에 무엇이 포함되어야 하는지
    - 어떤 데이터 저장, 연산 수행해야 하는지
    - 시스템이 반드시 수행해야 하는 기능
    - 사용자가 시스템을 통해 제공받기를 원하는 기능

  3) 비기능 요구사항(Non-Functional requirements)
    - 품질이나 제약사항과 관련된 요구사항
    - 시스템 장비 구성 요구사항
    - 성능 요구사항
    - 인터페이스 요구사항
    - 데이터를 구축하기 위해 필요한 요구사항
    - 테스트 요구사항
    - 보안 요구사항
    - 품질 : 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등
    - 프로젝트 관리 요구사항
    - 프로젝트 자원 요구사항

  4) 사용자 요구사항(User requirements)
    - 사용자 관점에서 본 시스템이 제공해야 할 요구사항
  
  5) 시스템 요구사항(System requirements)
    - 개발자 관점에서 본 시스템 전체가 제공해야 할 요구사항

6. 요구사항 개발 프로세스
  1) 요구사항 개발 프로세스
    - 요구사항을 도출하고 분석한 후 명세서에 정리한 다음 확인 및 검증하는 활동
    - 요구사항 개발 프로세스가 진행되게 전에 타당성 조사가 선행되어야 함
      * 타당성 조사 : 개발 프로세스가 비즈니스 목적에 부합되는지 등에 대한 정보를 수집, 평가한 보고서를 토대로 수행
    - 요구공학의 한 요소
    - 도출(Elicitation) -> 분석(Analysis) -> 명세(Specification) -> 확인(Validation)

  2) 요구사항 도출(Requirement Elicitation, 요구사항 수집)
    - 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항을 어떻게 수집할 것인지를 식별하고 이해하는 과정
    - 이해관계자가 식별됨
    - 소프트웨어 개발 생명 주기(SDLC) 동안 반복
    - 요구사항 도출하는 주요 기법
      - 청취와 인터뷰, 설문, 브레인스토밍, 워크샵, 프로토타이핑, 유스케이스
  
  3) 요구사항 분석(Requirement Analysis)
    - 명확하지 않거나 모호한 요구사항을 걸러내기 위한 과정
    - 타당성 조사하고 비용과 일정에 대한 제약을 설정함
    - 요구사항 분석에 사용되는 대표적인 도구
      - 자료 흐름도(DFD), 자료 사전(DD)
  
  4) 요구사항 명세(Requirement Specification)
    - 분석된 요구사항을 바탕으로 모델을 작성하고 문서화하는 것
    - 기능 요구사항 빠짐없이 기술
    - 비기능 요구사항은 필요한 것만 기술
    - 구체적 명세를 위한 소단위 명세서(Mini-Spec) 사용될 수 있음

  5) 요구사항 확인(Requirement Validation, 요구사항 검증)
    - 요구사항 명세서가 정확하고 안전하게 작성되었는지를 검토하는 활동
    - 이해관계자들이 검토
    - 형상관리(SCM) 수행
      * 형상관리(SCM: Software Configuration Management) : 만들어진 문서 데이터 통칭하는 말, 변경 사항 관리

  6) 요구공학(Requirements Engineering)
    - 무엇을 개발해야 하는지 요구사항 정의, 분석 및 관리하는 프로세스를 연구하는 학문
    - 요구사항 변경의 원인과 처리 방법을 이해하고 요구사항 관리 프로세스의 품질을 개선하여 실패를 최소화하는 것이 목표

  7) 요구사항 명세 기법
    - 정형 명세 기법
      - 수학적 원리 기반, 모델 기반
      - 수학적 기호, 정형화된 표기법
      - 요구사항 정확, 간결하게 표현
      - 요구사항에 대한 결과가 작성자에 관계없이 일관성이 있으므로 완전성 검증이 가능
      - 표기법이 어려워 사용자가 이해하기 어려움
      - VDM, Z, Petri-net, CSP

    - 비정형 명세 기법
      - 상태/기능/객체 중심
      - 자연어 기반 서술 또는 다이어그램으로 작성
      - 작성자에 따라 다를 수 있어 일관성 떨어지고 해석이 달라질 수 있음
      - 내용의 이해가 쉬워 의사소통 쉬움
      - FSM, Decision Table, ER모델링, State Chart(SADT)

7. 요구사항 분석
  1) 요구사항 분석(Requirement Analysis)
    - 소프트웨어 개발의 실제적인 첫 단계
    - 개발 대상에 대한 사용자의 요구사항을 이해하고 문서화하는 활동

  2) 구조적 분석 기법
    - 자료의 흐름과 처리를 중심으로 하는 요구사항 분석 방법
    - 하향식
    - 분석의 중복 배제 가능
    - 주요 구조적 분석 기법 도구
      - 자료 흐름도(FDD), 자료 사전(DD), 소단위 명세서(Mini-Spec), 개체 관계도(ERD), 상태 전이도(STD), 제어 명세서

  3) 자료 흐름도(DFD: Data Flow Diagram)
    - 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법
    - 자료 흐름 그래프, 버블 차트
  
  4) 자료 흐름도 기본 기호
    - 프로세스(Process)
      - 자료를 변환시키는 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함
    - 자료 흐름(Data Flow)
      - 자료의 이동(흐름)이나 연관관계를 나타냄
    - 자료 저장소(Data Store)
      - 시스템에서의 자료 저장소를 나타냄
    - 단말(Terminator)
      - 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음
  
  5) 자료 사전(DD: Data Dictionary)
    - 자료 흐름도에 있는 자료를 더 자세히 정의하고 기록한 것
    - 메타 데이터(Meta Data), 데이터의 데이터
    - 자료 사전에서 사용되는 표기 기호
      =  : 자료의 정의 : ~로 구성되어 있다(is composed of)
      +  : 자료의 연결 : 그리고(and)
      () : 자료의 생략 : 생략 가능한 자료(Optional)
      [] : 자료의 선택 : 또는(or)
      {} : 자료의 반복 : Iteration of
            ① {}n  : n번 이상 반복
            ② {}ⁿ  : 최대로 n번 반복
            ③ {}mⁿ : m 이상 n 이하로 반복 
      ** : 자료의 설명 : 주석(Comment)


